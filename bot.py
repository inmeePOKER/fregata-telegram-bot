import os
import json
import logging
import gspread
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext, JobQueue
from telegram.ext import MessageHandler, filters

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
creds_json = os.getenv("SERVICE_ACCOUNT_JSON")
creds = Credentials.from_service_account_info(json.loads(creds_json))
gc = gspread.authorize(creds)
spreadsheet_id = os.getenv("SPREADSHEET_ID")
sheet = gc.open_by_key(spreadsheet_id).sheet1  # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def get_pending_requests():
    rows = sheet.get_all_records()
    return [row for row in rows if row.get("–°—Ç–∞—Ç—É—Å") == "–ù–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /ping
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("I'm alive üü¢")

# –ö–æ–º–∞–Ω–¥–∞ /confirm
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    pending_requests = get_pending_requests()
    if not pending_requests:
        await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        return

    for request in pending_requests:
        post_text = request.get("–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
        post_date = request.get("–î–∞—Ç–∞")
        post_platform = request.get("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ Telegram
        reply_markup = [
            [
                {"text": "‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": "approve"},
                {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": "reject"}
            ]
        ]
        await update.message.reply_text(
            f"–ü–æ—Å—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É {post_platform}:\n{post_text}\n–î–∞—Ç–∞: {post_date}",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    if query.data == "approve":
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ Google Sheets
        row = sheet.find(query.message.text)
        sheet.update_cell(row.row, 6, "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
        await query.edit_message_text(text="–ü–æ—Å—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
    elif query.data == "reject":
        row = sheet.find(query.message.text)
        sheet.update_cell(row.row, 6, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        await query.edit_message_text(text="–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main() -> None:
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ping", ping))
    application.add_handler(CommandHandler("confirm", confirm))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.CallbackQuery, button))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    job_queue = application.job_queue
    job_queue.run_repeating(check_sheet_and_send, interval=60, first=10)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
async def check_sheet_and_send(context: CallbackContext) -> None:
    pending_requests = get_pending_requests()
    if not pending_requests:
        return

    for request in pending_requests:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ Telegram
        text = request.get("–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
        platform = request.get("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞")
        user_id = os.getenv("ADMIN_ID")

        await context.bot.send_message(
            chat_id=user_id,
            text=f"–ü–æ—Å—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É {platform}:\n{text}"
        )

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
