import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Nocna Fregata. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚úÖ")

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("I'm alive üü¢")

async def confirm_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="approve"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject")]
    ]
    await update.message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "approve":
        await query.edit_message_text("–ü–æ—Å—Ç —É—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ")
    else:
        await query.edit_message_text("–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("confirm", confirm_post))
    app.add_handler(CallbackQueryHandler(handle_callback))

    app.run_polling()

if __name__ == '__main__':
    main()
